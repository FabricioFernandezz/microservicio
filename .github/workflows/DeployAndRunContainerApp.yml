name: Deploy and Run Container App
env:
  REPO_NAME: ${{ github.event.repository.name }}
on:
  workflow_dispatch:
permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v4

    - name: 'Login via Azure CLI'
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 'Check and Create Container App Environment'
      run: |
        # Verificar si el environment existe
        ENV_EXISTS=$(az containerapp env list -g ${{ secrets.AZURE_RESOURCE_GROUP }} --query "[?name=='flask-estructura-env'].name" -o tsv)
        
        # Si no existe, crÃ©alo
        if [ -z "$ENV_EXISTS" ]; then
          echo "Creating Container App Environment..."
          az containerapp env create \
            --name flask-estructura-env \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --location eastus
        else
          echo "Container App Environment already exists"
        fi

    - name: 'Deploy Container App'
      uses: azure/container-apps-deploy-action@v1
      with:
        appSourcePath: ${{ github.workspace }}
        dockerfilePath: Dockerfile
        acrName: ${{ secrets.ACR_NAME }}
        acrUsername: ${{ secrets.REGISTRY_USERNAME }}
        acrPassword: ${{ secrets.REGISTRY_PASSWORD }}
        location: eastus
        containerAppName: recurso-aplicada
        resourceGroup: ${{ secrets.AZURE_RESOURCE_GROUP }}
        containerAppEnvironment: flask-estructura-env
        imageToDeploy: ${{ secrets.ACR_NAME_URL }}/${{env.REPO_NAME}}:${{ github.sha }}
        ingress: external
        targetPort: 5000
        environmentVariables: CONNECTION_STRING=${{ secrets.CONNECTION_STRING }}

    - name: 'Get Container App URL'
      id: get_url
      run: |
        URL=$(az containerapp show \
          --name recurso-aplicada \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --query "properties.configuration.ingress.fqdn" -o tsv)
        echo "URL=https://$URL" >> $GITHUB_ENV
        echo "App URL is https://$URL"
    
    - name: 'Wait for deployment to stabilize'
      run: sleep 30

    - name: 'Check health endpoint'
      run: |
        echo "Checking health at ${URL}/healthcheck"
        for i in {1..5}; do
          if curl --fail "${URL}/healthcheck"; then
            echo "Health check passed!"
            exit 0
          else
            echo "Health check attempt $i failed. Retrying in 5 seconds..."
            sleep 5
          fi
        done
    
        echo "Health check failed after 5 attempts."
        exit 1
      env:
        URL: ${{ env.URL }}
    
    - name: 'Logout from Azure'
      run: |
        az logout